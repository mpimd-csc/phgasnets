#!/usr/bin/env python3

import json
import h5py
import matplotlib.pyplot as plt
import argparse
import pathlib

plot_params = {
    # 'font.family': 'Latin Modern Math',
    'font.size': 13,
    'axes.grid': True,
    'lines.linewidth': 1.8,
    'grid.linewidth': 0.35,
    'grid.color': 'lightgray',
    'legend.loc': 'upper right',
    'legend.fancybox': True,
    'legend.framealpha' : 0.8,
    'legend.edgecolor': 'gray',
    'legend.fontsize': 10,
    'figure.dpi': 300
}

def parse_arguments():
    parser = argparse.ArgumentParser(description="Process some configuration file.")
    parser.add_argument('-c', '--config', default='config.json', help='JSON configuration file')
    parser.add_argument('-p', '--pipe-id', default=0, help='Compressor Case: Pipe ID')
    parser.add_argument('--csv', action=argparse.BooleanOptionalAction)
    parser.add_argument('-O','--out-dir', default=pathlib.Path.cwd(), type=pathlib.Path)
    return parser.parse_args()

class MorgenPipePlot:
    """ Pipe Inflow-Outflow plot, MORGEN-style """
    def __init__(self, figsize=(8,4.5)):
        plt.rcParams.update(plot_params)
        self.fig, self.axs = plt.subplots(nrows=2, ncols=2, figsize=figsize)
        for i in [0,1]:
            for j in [0, 1]:
                self.axs[i,j].tick_params(direction='in', which='major', length=5)
        self.axs[0, 1].title.set_text('Outflow')
        self.axs[0, 0].title.set_text('Inflow')


    def set_times(self, times):
        self._times = times

    def add_inflow_pressure(self, pressure):
        self.axs[0,0].plot(self._times, pressure, linestyle='-', color='green')

        self.axs[0,0].set_xlim(0,24)
        self.axs[0,0].set_xticks([0,6,12,18,24])

        self.axs[0,0].set_ylabel('Pressure [bar]')
        self.axs[0,0].set_ylim(70,95)
        self.axs[0,0].set_yticks([70,75,80,85,90,95])

    def add_inflow_momentum(self, momentum):
        self.axs[1,0].plot(self._times, momentum, linestyle='-', color='red')

        self.axs[1,0].set_xlabel('Time [h]')
        self.axs[1,0].set_xlim(0,24)
        self.axs[1,0].set_xticks([0,6,12,18,24])

        self.axs[1,0].set_ylabel('Momentum')
        self.axs[1,0].set_ylim(300,600)
        self.axs[1,0].set_yticks([300,400,500,600])

    def add_outflow_pressure(self, pressure):
        self.axs[1,1].plot(self._times, pressure, linestyle='-', color='red')

        self.axs[1,1].set_xlabel('Time [h]')
        self.axs[1,1].set_xlim(0,24)
        self.axs[1,1].set_xticks([0,6,12,18,24])

        self.axs[1,1].set_ylabel('Pressure [bar]')
        self.axs[1,1].set_ylim(70,95)
        self.axs[1,1].set_yticks([70,75,80,85,90,95])
        self.axs[1,1].yaxis.tick_right()
        self.axs[1,1].yaxis.set_label_position("right")

    def add_outflow_momentum(self, momentum):
        self.axs[0,1].plot(self._times, momentum, linestyle='-', color='green')

        self.axs[0,1].set_xlim(0,24)
        self.axs[0,1].set_xticks([0,6,12,18,24])

        self.axs[0,1].set_ylabel('Momentum')
        self.axs[0,1].set_ylim(300,600)
        self.axs[0,1].set_yticks([300,400,500,600])
        self.axs[0,1].yaxis.tick_right()
        self.axs[0,1].yaxis.set_label_position("right")

    def save(self, filename):
        self.fig.savefig(filename, bbox_inches='tight')

    def __del__(self):
        plt.close()

args = parse_arguments()
print("Config file:", args.config)

with open(args.config, 'r') as f:
    config = json.load(f)

filename = config['io']['filename']

GAS_CONSTANT = config['GAS_CONSTANT']

print(f"Reading results file [{filename+'.h5'}]")
results = h5py.File(filename+'.h5', 'r')
mesh = results[f'pipe{args.pipe_id}/mesh'][()]
times = list(results[f'pipe{args.pipe_id}'].keys())
times.remove('mesh')
times.sort(key=int)

timestamps = [results[f'pipe{args.pipe_id}'][t]['timestamp'][()]/3600 for t in times]
inflow_pressure = [results[f'pipe{args.pipe_id}'][t]['pressure'][()][0]/1e5 for t in times]
outflow_pressure = [results[f'pipe{args.pipe_id}'][t]['pressure'][()][-1]/1e5 for t in times]
inflow_momentum = [results[f'pipe{args.pipe_id}'][t]['momentum'][()][0] for t in times]
outflow_momentum = [results[f'pipe{args.pipe_id}'][t]['momentum'][()][-1] for t in times]

plot = MorgenPipePlot()
plot.set_times(timestamps)
plot.add_inflow_pressure(inflow_pressure)
plot.add_inflow_momentum(inflow_momentum)
plot.add_outflow_pressure(outflow_pressure)
plot.add_outflow_momentum(outflow_momentum)

outfile = args.out_dir / (filename +'_pipe'+ args.pipe_id + '.pdf')
plot.save(outfile)
print(f"Plot saved as [{outfile}]")

if args.csv:
    import numpy as np

    outdata = np.c_[
        timestamps,
        inflow_pressure,
        outflow_pressure,
        inflow_momentum,
        outflow_momentum
    ]

    outfile = args.out_dir / (filename +'_pipe'+ args.pipe_id + '.csv')
    np.savetxt(
        outfile,
        outdata,
        header="time \
    inletPressure \
    outletPressure \
    inletMomentum \
    outletMomentum ",
        comments=''
    )

    print(f"Plot data saved as [{outfile}]")
