#!/usr/bin/env python3
import argparse
from os.path import basename
import pathlib
import json
import numpy as np
import matplotlib.pyplot as plt

plot_params = {
    # 'font.family': 'Latin Modern Math',
    'font.size': 13,
    'axes.grid': True,
    'lines.linewidth': 1.8,
    'grid.linewidth': 0.35,
    'grid.color': 'lightgray',
    'legend.loc': 'upper right',
    'legend.fancybox': True,
    'legend.framealpha' : 0.8,
    'legend.edgecolor': 'gray',
    'legend.fontsize': 10,
    'figure.dpi': 300
}

class MorgenPipePlot:
    """ Pipe Inflow-Outflow plot, MORGEN-style """
    def __init__(self, figsize=(8,4.5)):
        plt.rcParams.update(plot_params)
        self.fig, self.axs = plt.subplots(nrows=2, ncols=2, figsize=figsize)
        for i in [0,1]:
            for j in [0, 1]:
                self.axs[i,j].tick_params(direction='in', which='major', length=5)
        self.axs[0, 1].title.set_text('Outflow')
        self.axs[0, 0].title.set_text('Inflow')


    def set_times(self, times):
        self._times = times

    def add_inflow_pressure(self, pressure):
        self.axs[0,0].plot(self._times, pressure, linestyle='-', color='green')

        self.axs[0,0].set_xlim(0,24)
        self.axs[0,0].set_xticks([0,6,12,18,24])

        self.axs[0,0].set_ylabel('Pressure [bar]')
        self.axs[0,0].set_ylim(70,85)
        self.axs[0,0].set_yticks([70,75,80,85])

    def add_inflow_momentum(self, momentum):
        self.axs[1,0].plot(self._times, momentum, linestyle='-', color='red')

        self.axs[1,0].set_xlabel('Time [h]')
        self.axs[1,0].set_xlim(0,24)
        self.axs[1,0].set_xticks([0,6,12,18,24])

        self.axs[1,0].set_ylabel('Momentum')
        self.axs[1,0].set_ylim(300,600)
        self.axs[1,0].set_yticks([300,400,500,600])

    def add_outflow_pressure(self, pressure):
        self.axs[1,1].plot(self._times, pressure, linestyle='-', color='red')

        self.axs[1,1].set_xlabel('Time [h]')
        self.axs[1,1].set_xlim(0,24)
        self.axs[1,1].set_xticks([0,6,12,18,24])

        self.axs[1,1].set_ylabel('Pressure [bar]')
        self.axs[1,1].set_ylim(70,85)
        self.axs[1,1].set_yticks([70,75,80,85])
        self.axs[1,1].yaxis.tick_right()
        self.axs[1,1].yaxis.set_label_position("right")

    def add_outflow_momentum(self, momentum):
        self.axs[0,1].plot(self._times, momentum, linestyle='-', color='green')

        self.axs[0,1].set_xlim(0,24)
        self.axs[0,1].set_xticks([0,6,12,18,24])

        self.axs[0,1].set_ylabel('Momentum')
        self.axs[0,1].set_ylim(300,600)
        self.axs[0,1].set_yticks([300,400,500,600])
        self.axs[0,1].yaxis.tick_right()
        self.axs[0,1].yaxis.set_label_position("right")

    def save(self, filename):
        self.fig.savefig(filename, bbox_inches='tight')

    def __del__(self):
        plt.close()


def parse_arguments():
    parser = argparse.ArgumentParser(description="Process results CSV file.")
    parser.add_argument('-c', '--config', default='config.json', help='JSON configuration file')
    parser.add_argument('-O','--out-dir', default=pathlib.Path.cwd(), type=pathlib.Path)
    return parser.parse_args()

args = parse_arguments()

# Read config file
with open(args.config, 'r') as f:
    config = json.load(f)

# Read CSV file
filename = config['io']['filename'] + '.csv'
print(f"Reading results file [{filename}]")

header = np.loadtxt(
    filename,
    delimiter=" ",
    skiprows=0,
    max_rows=1,
    dtype=str
).tolist()

results = np.loadtxt(
    filename,
    delimiter=" ",
    skiprows=1
)

# Preprocess data
data = dict(
    zip(
        header,
        [results[:, i] for i in range(results.shape[1])]
    )
)

# Plot
plot = MorgenPipePlot()
plot.set_times(data['time'])
plot.add_inflow_pressure(data['inletPressure'])
plot.add_inflow_momentum(data['inletMomentum'])
plot.add_outflow_pressure(data['outletPressure'])
plot.add_outflow_momentum(data['outletMomentum'])

outfile = args.out_dir / basename(filename).replace('.csv', '.pdf')
plot.save(outfile)
print(f"Plot saved as [{outfile}]")
